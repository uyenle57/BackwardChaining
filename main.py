# -*- coding: utf-8 -*-#import textwrapfrom BackwardChaining.InferenceEngine import InferenceEnginefrom BackwardChaining.KnowledgeBase import KnowledgeBasefrom BackwardChaining.WorkingMemory import WorkingMemorydef main():    print(textwrap.dedent("""    ================================================================                      ARTIFICIAL INTELLIGENCE            Coursework 2: Backward Chaining Rule Based System                                Uyen Le                        tle004@gold.ac.uk    ================================================================    \n"""))    # KNOWLEDGE BASE: contains Rules and Facts    # print("Knowlegde Base:\n")    knowledge_base = KnowledgeBase()    rules = knowledge_base.get_rules()    # for i in range(0, len(rules)):    #     print("Rule " + str(i + 1) + "\t" + rules[i].to_string() + "\n")    # Working Memory: contains Facts    working_memory = WorkingMemory()    print("\nWorking Memory: ", working_memory.get_facts(), "\n")    # Define the goal    goal = ('b', 'g')    # print('Goal: ', goal, "\n")    # Inference Engine    inference_engine = InferenceEngine()    inference_engine.backward_chaining(goal)    ############################################################################    # Depth First Search test    graph = {        ('b', 'g'): set([('f', 'h'), ('a', 'c')]),        ('f', 'h'): set(),        ('a', 'c'): set([('d', 'j'), ('e', 'm'), ('k', 'i')]),        ('d', 'j'): set(),        ('k', 'i'): set([('u', 'v')]),        ('u', 'v'): set(),        ('e', 'm'): set([('n', 's')]),        ('n', 's'): set([('p', 'q')]),        ('p', 'q'): set([('r', 't')])    }    # list(backward_chaining.depth_first_search(graph, ('b', 'g'), ('d', 'j')))main()